module.exports = {
  globals: {
    after: true,
    afterEach: true,
    before: true,
    beforeEach: true,
    define: true,
    describe: true,
    document: true,
    d3: true,
    exports: true,
    driver: true,
    global: true,
    gulp: true,
    it: true,
    mocha: true,
    module: true,
    profile: true,
    require: true,
    requirejs: true,
    setup: true,
    step: true,
    suite: true,
    suiteSetup: true,
    suiteTeardown: true,
    teardown: true,
    test: true,
    topojson: true,
    webdriver: true,
    $: true,
  },
  env: {
    browser: true,
    node: true,
    es6: true,
  },
  parserOptions: {
    ecmaVersion: 9,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
  extends: ['google'],
  plugins: ['react', 'json-format'],
  settings: {
    'json/sort-package-json': false,
    'json/ignore-files': ['**/package-lock.json', '**/npm-shrinkwrap.json', '**/npm-shrinkwrap.json-prod'],
  },
  rules: {
    'arrow-spacing': 'error',
    'block-spacing': 'off',
    'brace-style': ['error', 'stroustrup', { allowSingleLine: true }],
    camelcase: 'off',
    'comma-dangle': ['error', 'never'],
    'comma-spacing': ['error', { before: false, after: true }],
    'comma-style': ['error', 'last'],
    complexity: ['error', 50],
    curly: ['error', 'multi-or-nest', 'consistent'],
    'func-call-spacing': 'error',
    'guard-for-in': 'off',
    indent: [
      2,
      2,
      {
        CallExpression: { arguments: 'first' },
        FunctionDeclaration: { body: 1, parameters: 'first' },
        FunctionExpression: { body: 1, parameters: 'first' },
        VariableDeclarator: 'first',
        MemberExpression: 'off',
        ObjectExpression: 'first',
        ArrayExpression: 'first',
        SwitchCase: 0,
        ignoredNodes: ['ConditionalExpression'],
      },
    ],
    'key-spacing': ['error', { mode: 'minimum' }],
    'linebreak-style': ['error', 'unix'],
    'max-depth': ['error', 9],
    'max-len': 'off',
    'max-lines': ['error', 1000],
    'max-lines-per-function': ['error', { max: 1000, skipBlankLines: true, skipComments: true }],
    'max-nested-callbacks': ['error', 10],
    'max-params': ['error', 14],
    'new-cap': 'off',
    'no-const-assign': 'error',
    'no-debugger': 'error',
    'no-dupe-class-members': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-imports': ['error', { includeExports: true }],
    'no-invalid-this': 'off',
    'no-labels': ['error', { allowSwitch: true }],
    'no-lonely-if': 'error',
    'no-mixed-requires': 'error',
    'no-multi-spaces': 'off',
    'no-trailing-spaces': 'error',
    'no-undef': 'error',
    'no-unneeded-ternary': 'error',
    'no-var': 'off',
    'no-whitespace-before-property': 'error',
    'one-var': ['error', 'never'],
    'object-curly-spacing': ['error', 'never'],
    'operator-linebreak': ['error', 'after'],
    'padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: '*', next: 'block' },
      { blankLine: 'always', prev: '*', next: 'block-like' },
      { blankLine: 'always', prev: '*', next: 'class' },
      { blankLine: 'always', prev: '*', next: 'do' },
      { blankLine: 'always', prev: '*', next: 'multiline-expression' },
      { blankLine: 'always', prev: '*', next: 'for' },
      { blankLine: 'always', prev: '*', next: 'function' },
      { blankLine: 'always', prev: '*', next: 'if' },
      { blankLine: 'always', prev: '*', next: 'switch' },
      { blankLine: 'always', prev: '*', next: 'return' },
      { blankLine: 'always', prev: '*', next: 'while' },
      { blankLine: 'always', prev: 'block-like', next: '*' },
      { blankLine: 'always', prev: 'multiline-expression', next: '*' },
    ],
    'prefer-promise-reject-errors': ['error', { allowEmptyReject: true }],
    'prefer-rest-params': 'off',
    'prefer-spread': 'off',
    'quote-props': ['error', 'as-needed'],
    quotes: ['error', 'single', { avoidEscape: true }],
    'react/jsx-uses-react': 'error',
    'react/jsx-uses-vars': 'error',
    'require-jsdoc': 'off',
    'semi-spacing': ['error', { before: false, after: true }],
    'semi-style': ['error', 'last'],
    'space-before-blocks': 'error',
    'space-before-function-paren': [
      'error',
      {
        anonymous: 'never',
        named: 'never',
        asyncArrow: 'always',
      },
    ],
    'space-in-parens': ['error', 'never'],
    'space-infix-ops': 'error',
    'spaced-comment': ['error', 'always', { block: { balanced: true } }],
  },
};
